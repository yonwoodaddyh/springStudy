package bitcho.user.test;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.sql.SQLException;

import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.dao.EmptyResultDataAccessException;

import bitcho.user.dao.UserDAO;
import bitcho.user.domain.User;

public class UserDAOTest {

	@Test
	public void addAndGet() throws SQLException {
		// TODO Auto-generated method stub
		ApplicationContext context = new GenericXmlApplicationContext("applicationContext.xml");
		UserDAO dao = context.getBean("userDAO", UserDAO.class);
		
		dao.deleteAll();
		assertThat(dao.getCount(), is(0));
		
		User user = new User("bitcho10", "조성한", "dusdn1027");
		User user1 = new User("bitcho11", "조성한", "dusdn1027");
		User user2 = new User("bitcho12", "조성한", "dusdn1027");
		User user3 = new User("bitcho13", "조성한", "dusdn1027");
//		user.setId("gyumee");
//		user.setName("조연우");
//		user.setPassword("dusdn1027");
		
		
		dao.add(user);
		assertThat(dao.getCount(), is(1));

		dao.add(user1);
		assertThat(dao.getCount(), is(2));
		
		dao.add(user2);
		assertThat(dao.getCount(), is(3));
		
		dao.add(user3);
		assertThat(dao.getCount(), is(4));
		
		User userget1 = dao.get(user1.getId());
		assertThat(userget1.getName(), is(user1.getName()));
		assertThat(userget1.getPassword(), is(user1.getPassword()));
		
		User userget2 = dao.get(user2.getId());
		assertThat(userget2.getName(), is(user2.getName()));
		assertThat(userget2.getPassword(), is(user2.getPassword()));
	}
	
	@Test(expected=EmptyResultDataAccessException.class)
	public void getUserFailure() throws SQLException {
		@SuppressWarnings("resource")
		ApplicationContext context = new GenericXmlApplicationContext("applicationContext.xml");
		
		UserDAO dao = context.getBean("userDAO", UserDAO.class);
		dao.deleteAll();
		assertThat(dao.getCount(), is(0));
		
		dao.get("unknown_id");
	}
	
}